import React, { useEffect, useState } from "react";

function Report() {
  const [results, setResults] = useState([]);
  const [message, setMessage] = useState("");
  const [role, setRole] = useState("");

  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (!storedUser) {
      setMessage("ðŸš¨ No user found in local storage.");
      return;
    }

    let user;
    try {
      user = JSON.parse(storedUser);
      setRole(user.role);
    } catch (err) {
      console.error("Failed to parse user from localStorage:", err);
      setMessage("ðŸš¨ Invalid user data.");
      return;
    }

    const { role, id } = user;
    let url = role === "athlete"
      ? `http://localhost:8080/api/results/athlete/${id}`
      : `http://localhost:8080/api/results/coach/${id}`;

    fetch(url)
      .then((res) => {
        if (!res.ok) throw new Error("Failed to fetch results");
        return res.json();
      })
      .then((data) => {
        const dataWithEditFlag = (Array.isArray(data) ? data : [data]).map(r => ({
          ...r,
          editMode: false
        }));
        setResults(dataWithEditFlag);
      })
      .catch((err) => {
        console.error(err);
        setMessage("ðŸš¨ Failed to fetch results.");
      });
  }, []);

  const toggleEdit = (id) => {
    setResults((prev) =>
      prev.map((r) =>
        r.id === id ? { ...r, editMode: !r.editMode } : r
      )
    );
  };

  const handleChange = (id, field, value) => {
    setResults((prev) =>
      prev.map((r) =>
        r.id === id ? { ...r, [field]: value } : r
      )
    );
  };

  const handleSave = (result) => {
    fetch(`http://localhost:8080/api/results/${result.id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        comments: result.comments,
        badges: result.badges,
      }),
    })
      .then((res) => {
        if (!res.ok) throw new Error("Failed to update result");
        return res.json();
      })
      .then((updatedResult) => {
        setResults((prev) =>
          prev.map((r) =>
            r.id === result.id
              ? { ...r, comments: updatedResult.comments, badges: updatedResult.badges, editMode: false }
              : r
          )
        );
      })
      .catch((err) => {
        console.error(err);
        alert("ðŸš¨ Failed to save changes");
      });
  };

  if (message) return <p>{message}</p>;
  if (results.length === 0) return <p>No reports found.</p>;

  return (
    <div className="report-list scroll-section">
      <p className="field-heading">Report Generated by AI</p>
      {results.map((result) => (
        <div key={result.id} className="report-card p-4 border rounded mb-4">
          <p className="field-heading">Video: {result.videoFileName || "N/A"}</p>
          <p>Coach: {result.coachName || "N/A"}</p>
          <p>Athlete: {result.athleteName || "N/A"}</p>
          <p>Percentile: {result.percentile || "N/A"}</p>
          <p>Injury Risk: {result.injuryRisk || "N/A"}</p>
          <p>Recommendations: {result.recommendations || "N/A"}</p>

          <p>
            Comments: {role === "coach" && result.editMode ? (
              <input
                type="text"
                value={result.comments}
                onChange={(e) => handleChange(result.id, "comments", e.target.value)}
                className="border rounded px-2 py-1 w-full"
              />
            ) : (
              result.comments || "N/A"
            )}
          </p>

          <p>
            Badges: {role === "coach" && result.editMode ? (
              <input
                type="number"
                min="0"
                max="10"
                value={result.badges}
                onChange={(e) => handleChange(result.id, "badges", e.target.value)}
                className="border rounded px-2 py-1 w-20"
              />
            ) : (
              result.badges || 0
            )}
          </p>

          <p>Created At: {result.createdAt || "N/A"}</p>

          {role === "coach" && (
            <div className="flex justify-end mt-2">
              <button
                className="upload-button"
                onClick={() =>
                  result.editMode
                    ? handleSave(result)
                    : toggleEdit(result.id)
                }
              >
                {result.editMode ? "Save" : "Edit"}
              </button>
            </div>
          )}
        </div>
      ))}
    </div>
  );
}

export default Report;
